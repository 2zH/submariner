// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package controller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KCPVPNCtlClient is the client API for KCPVPNCtl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KCPVPNCtlClient interface {
	GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsReply, error)
	ConnectToCluster(ctx context.Context, in *ConnectToClusterRequest, opts ...grpc.CallOption) (*ConnectToClusterReply, error)
	AllowConnectionFromCluster(ctx context.Context, in *AllowConnectionFromClusterRequest, opts ...grpc.CallOption) (*AllowConnectionFromClusterReply, error)
	DisconnectFromCluster(ctx context.Context, in *DisconnectFromClusterRequest, opts ...grpc.CallOption) (*DisconnectFromClusterReply, error)
}

type kCPVPNCtlClient struct {
	cc grpc.ClientConnInterface
}

func NewKCPVPNCtlClient(cc grpc.ClientConnInterface) KCPVPNCtlClient {
	return &kCPVPNCtlClient{cc}
}

func (c *kCPVPNCtlClient) GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*GetConnectionsReply, error) {
	out := new(GetConnectionsReply)
	err := c.cc.Invoke(ctx, "/kcpvpn_ctl.KCPVPNCtl/GetConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kCPVPNCtlClient) ConnectToCluster(ctx context.Context, in *ConnectToClusterRequest, opts ...grpc.CallOption) (*ConnectToClusterReply, error) {
	out := new(ConnectToClusterReply)
	err := c.cc.Invoke(ctx, "/kcpvpn_ctl.KCPVPNCtl/ConnectToCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kCPVPNCtlClient) AllowConnectionFromCluster(ctx context.Context, in *AllowConnectionFromClusterRequest, opts ...grpc.CallOption) (*AllowConnectionFromClusterReply, error) {
	out := new(AllowConnectionFromClusterReply)
	err := c.cc.Invoke(ctx, "/kcpvpn_ctl.KCPVPNCtl/AllowConnectionFromCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kCPVPNCtlClient) DisconnectFromCluster(ctx context.Context, in *DisconnectFromClusterRequest, opts ...grpc.CallOption) (*DisconnectFromClusterReply, error) {
	out := new(DisconnectFromClusterReply)
	err := c.cc.Invoke(ctx, "/kcpvpn_ctl.KCPVPNCtl/DisconnectFromCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KCPVPNCtlServer is the server API for KCPVPNCtl service.
// All implementations must embed UnimplementedKCPVPNCtlServer
// for forward compatibility
type KCPVPNCtlServer interface {
	GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsReply, error)
	ConnectToCluster(context.Context, *ConnectToClusterRequest) (*ConnectToClusterReply, error)
	AllowConnectionFromCluster(context.Context, *AllowConnectionFromClusterRequest) (*AllowConnectionFromClusterReply, error)
	DisconnectFromCluster(context.Context, *DisconnectFromClusterRequest) (*DisconnectFromClusterReply, error)
	mustEmbedUnimplementedKCPVPNCtlServer()
}

// UnimplementedKCPVPNCtlServer must be embedded to have forward compatible implementations.
type UnimplementedKCPVPNCtlServer struct {
}

func (UnimplementedKCPVPNCtlServer) GetConnections(context.Context, *GetConnectionsRequest) (*GetConnectionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (UnimplementedKCPVPNCtlServer) ConnectToCluster(context.Context, *ConnectToClusterRequest) (*ConnectToClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToCluster not implemented")
}
func (UnimplementedKCPVPNCtlServer) AllowConnectionFromCluster(context.Context, *AllowConnectionFromClusterRequest) (*AllowConnectionFromClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowConnectionFromCluster not implemented")
}
func (UnimplementedKCPVPNCtlServer) DisconnectFromCluster(context.Context, *DisconnectFromClusterRequest) (*DisconnectFromClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectFromCluster not implemented")
}
func (UnimplementedKCPVPNCtlServer) mustEmbedUnimplementedKCPVPNCtlServer() {}

// UnsafeKCPVPNCtlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KCPVPNCtlServer will
// result in compilation errors.
type UnsafeKCPVPNCtlServer interface {
	mustEmbedUnimplementedKCPVPNCtlServer()
}

func RegisterKCPVPNCtlServer(s grpc.ServiceRegistrar, srv KCPVPNCtlServer) {
	s.RegisterService(&KCPVPNCtl_ServiceDesc, srv)
}

func _KCPVPNCtl_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KCPVPNCtlServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcpvpn_ctl.KCPVPNCtl/GetConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KCPVPNCtlServer).GetConnections(ctx, req.(*GetConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KCPVPNCtl_ConnectToCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectToClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KCPVPNCtlServer).ConnectToCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcpvpn_ctl.KCPVPNCtl/ConnectToCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KCPVPNCtlServer).ConnectToCluster(ctx, req.(*ConnectToClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KCPVPNCtl_AllowConnectionFromCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowConnectionFromClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KCPVPNCtlServer).AllowConnectionFromCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcpvpn_ctl.KCPVPNCtl/AllowConnectionFromCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KCPVPNCtlServer).AllowConnectionFromCluster(ctx, req.(*AllowConnectionFromClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KCPVPNCtl_DisconnectFromCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectFromClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KCPVPNCtlServer).DisconnectFromCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcpvpn_ctl.KCPVPNCtl/DisconnectFromCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KCPVPNCtlServer).DisconnectFromCluster(ctx, req.(*DisconnectFromClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KCPVPNCtl_ServiceDesc is the grpc.ServiceDesc for KCPVPNCtl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KCPVPNCtl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kcpvpn_ctl.KCPVPNCtl",
	HandlerType: (*KCPVPNCtlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnections",
			Handler:    _KCPVPNCtl_GetConnections_Handler,
		},
		{
			MethodName: "ConnectToCluster",
			Handler:    _KCPVPNCtl_ConnectToCluster_Handler,
		},
		{
			MethodName: "AllowConnectionFromCluster",
			Handler:    _KCPVPNCtl_AllowConnectionFromCluster_Handler,
		},
		{
			MethodName: "DisconnectFromCluster",
			Handler:    _KCPVPNCtl_DisconnectFromCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}
